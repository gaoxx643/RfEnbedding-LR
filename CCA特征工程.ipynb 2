{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.cross_decomposition import CCA,PLSCanonical, PLSRegression\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "读入体验和其他相关特征，统计周期一个星期。该数据由王凯提供。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver_exp_0 = pd.read_csv('driver_exp_features_1_15.csv')\n",
    "driver_exp_1 = pd.read_csv('driver_exp_features_16_70.csv')\n",
    "driver_exp_2 = pd.read_csv('driver_exp_features_70PLUS.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "读入李盼的收入相关数据。该数据可以分为与特征同期和特征后一个星期。这里暂时使用特征后一个星期数据。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver_income0 = pd.read_table('features_driver_data_0730_0805.txt')\n",
    "driver_income1 = pd.read_table('features_driver_data_0806_0812.txt')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "读入饶东浩的安全label信息"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "unsafe = pd.read_table('0912_driver_mirror_case_cnt_0806_30d.csv', encoding='gbk', sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>driver_id</th>\n",
       "      <th>mirror_total_ord_dcnt</th>\n",
       "      <th>renshang_ord_dcnt</th>\n",
       "      <th>xingsaorao_ord_dcnt</th>\n",
       "      <th>sunhuicaiwu_ord_dcnt</th>\n",
       "      <th>shilian_ord_dcnt</th>\n",
       "      <th>cusi_ord_dcnt</th>\n",
       "      <th>qiangjie_ord_dcnt</th>\n",
       "      <th>daoqie_ord_dcnt</th>\n",
       "      <th>bangjiaqiaozha_ord_dcnt</th>\n",
       "      <th>shedu_ord_dcnt</th>\n",
       "      <th>weiguiyunxing_ord_dcnt</th>\n",
       "      <th>qianzaifengxian_ord_dcnt</th>\n",
       "      <th>weixie_ord_dcnt</th>\n",
       "      <th>shipinanquan_ord_dcnt</th>\n",
       "      <th>weixieanquan_ord_dcnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>580542545253297</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>567950132367235</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>565931240067699</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>566437054391715</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>563348738670594</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         driver_id  mirror_total_ord_dcnt  renshang_ord_dcnt  \\\n",
       "0  580542545253297                      1                  0   \n",
       "1  567950132367235                      1                  0   \n",
       "2  565931240067699                      1                  0   \n",
       "3  566437054391715                      1                  0   \n",
       "4  563348738670594                      1                  0   \n",
       "\n",
       "   xingsaorao_ord_dcnt  sunhuicaiwu_ord_dcnt  shilian_ord_dcnt  cusi_ord_dcnt  \\\n",
       "0                    0                     0                 0              0   \n",
       "1                    0                     0                 0              0   \n",
       "2                    0                     0                 0              0   \n",
       "3                    0                     0                 0              0   \n",
       "4                    0                     0                 0              0   \n",
       "\n",
       "   qiangjie_ord_dcnt  daoqie_ord_dcnt  bangjiaqiaozha_ord_dcnt  \\\n",
       "0                  0                0                        0   \n",
       "1                  0                0                        0   \n",
       "2                  0                0                        1   \n",
       "3                  0                0                        1   \n",
       "4                  0                0                        0   \n",
       "\n",
       "   shedu_ord_dcnt  weiguiyunxing_ord_dcnt  qianzaifengxian_ord_dcnt  \\\n",
       "0               0                       0                         0   \n",
       "1               0                       0                         0   \n",
       "2               0                       0                         0   \n",
       "3               0                       0                         0   \n",
       "4               0                       0                         0   \n",
       "\n",
       "   weixie_ord_dcnt  shipinanquan_ord_dcnt  weixieanquan_ord_dcnt  \n",
       "0                1                      0                      0  \n",
       "1                1                      0                      0  \n",
       "2                0                      0                      0  \n",
       "3                0                      0                      0  \n",
       "4                1                      0                      0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unsafe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city_id</th>\n",
       "      <th>driver_id</th>\n",
       "      <th>online_time_avg</th>\n",
       "      <th>iph</th>\n",
       "      <th>tph</th>\n",
       "      <th>online_time_std</th>\n",
       "      <th>iph_std</th>\n",
       "      <th>tph_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>562950053805082</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>562950053934600</td>\n",
       "      <td>1.591667</td>\n",
       "      <td>39.326702</td>\n",
       "      <td>0.628272</td>\n",
       "      <td>0.141667</td>\n",
       "      <td>3.130802</td>\n",
       "      <td>0.056366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>562950054408618</td>\n",
       "      <td>10.844444</td>\n",
       "      <td>63.006762</td>\n",
       "      <td>1.321721</td>\n",
       "      <td>1.278406</td>\n",
       "      <td>3.023289</td>\n",
       "      <td>0.593122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>562950054466944</td>\n",
       "      <td>1.233333</td>\n",
       "      <td>46.045946</td>\n",
       "      <td>1.297297</td>\n",
       "      <td>1.097927</td>\n",
       "      <td>19.540659</td>\n",
       "      <td>0.361714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>562950054486958</td>\n",
       "      <td>4.066667</td>\n",
       "      <td>43.924590</td>\n",
       "      <td>2.090164</td>\n",
       "      <td>2.473096</td>\n",
       "      <td>12.092422</td>\n",
       "      <td>0.387330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   city_id        driver_id  online_time_avg        iph       tph  \\\n",
       "0        1  562950053805082         0.016667   0.000000  0.000000   \n",
       "1        1  562950053934600         1.591667  39.326702  0.628272   \n",
       "2        1  562950054408618        10.844444  63.006762  1.321721   \n",
       "3        1  562950054466944         1.233333  46.045946  1.297297   \n",
       "4        1  562950054486958         4.066667  43.924590  2.090164   \n",
       "\n",
       "   online_time_std    iph_std   tph_std  \n",
       "0         0.000000   0.000000  0.000000  \n",
       "1         0.141667   3.130802  0.056366  \n",
       "2         1.278406   3.023289  0.593122  \n",
       "3         1.097927  19.540659  0.361714  \n",
       "4         2.473096  12.092422  0.387330  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "driver_income0.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "查看数据的基本维度信息"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3143263, 8)\n",
      "2825534\n"
     ]
    }
   ],
   "source": [
    "print(driver_income0.shape)\n",
    "\n",
    "print(driver_exp_0.shape[0]+driver_exp_1.shape[0]+driver_exp_2.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2825534, 159)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expall = pd.concat([driver_exp_0, driver_exp_1, driver_exp_2])\n",
    "ids = expall.driver_id\n",
    "expall.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>driver_id</th>\n",
       "      <th>cnt_respond_orders_7d</th>\n",
       "      <th>cnt_pinche_orders_7d</th>\n",
       "      <th>cnt_appointment_orders_7d</th>\n",
       "      <th>cnt_morning_peak_orders_7d</th>\n",
       "      <th>cnt_normal_peak_orders_7d</th>\n",
       "      <th>cnt_evening_peak_orders_7d</th>\n",
       "      <th>cnt_cancel_orders_7d</th>\n",
       "      <th>cnt_cancel_by_p_orders_7d</th>\n",
       "      <th>cnt_grab_after_cancel_by_p_orders_7d</th>\n",
       "      <th>...</th>\n",
       "      <th>cnt_driver_star_feedback_5star_7d</th>\n",
       "      <th>cnt_passenger_complaint_7d</th>\n",
       "      <th>cnt_passenger_complaint_result_succeed_7d</th>\n",
       "      <th>cnt_passenger_complaint_result_failed_7d</th>\n",
       "      <th>cnt_driver_complaint_7d</th>\n",
       "      <th>cnt_driver_complaint_result_succeed_7d</th>\n",
       "      <th>cnt_driver_complaint_result_failed_7d</th>\n",
       "      <th>cnt_questionary_comment_order_7d</th>\n",
       "      <th>cnt_questionary_comment_positive_answer_7d</th>\n",
       "      <th>cnt_questionary_comment_negative_answer_7d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>580542259157740</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>580542259165490</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>580542259165990</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>580542259166070</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>580542259170593</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 159 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         driver_id  cnt_respond_orders_7d  cnt_pinche_orders_7d  \\\n",
       "0  580542259157740                      1                     0   \n",
       "1  580542259165490                      3                     0   \n",
       "2  580542259165990                     14                     0   \n",
       "3  580542259166070                      1                     0   \n",
       "4  580542259170593                      3                     1   \n",
       "\n",
       "   cnt_appointment_orders_7d  cnt_morning_peak_orders_7d  \\\n",
       "0                          0                         1.0   \n",
       "1                          1                         2.0   \n",
       "2                          0                         5.0   \n",
       "3                          0                         NaN   \n",
       "4                          0                         NaN   \n",
       "\n",
       "   cnt_normal_peak_orders_7d  cnt_evening_peak_orders_7d  \\\n",
       "0                        NaN                         NaN   \n",
       "1                        1.0                         NaN   \n",
       "2                        9.0                         NaN   \n",
       "3                        1.0                         NaN   \n",
       "4                        3.0                         NaN   \n",
       "\n",
       "   cnt_cancel_orders_7d  cnt_cancel_by_p_orders_7d  \\\n",
       "0                     0                        NaN   \n",
       "1                     3                        2.0   \n",
       "2                     5                        5.0   \n",
       "3                     0                        NaN   \n",
       "4                     2                        1.0   \n",
       "\n",
       "   cnt_grab_after_cancel_by_p_orders_7d  \\\n",
       "0                                   NaN   \n",
       "1                                   2.0   \n",
       "2                                   5.0   \n",
       "3                                   NaN   \n",
       "4                                   1.0   \n",
       "\n",
       "                      ...                      \\\n",
       "0                     ...                       \n",
       "1                     ...                       \n",
       "2                     ...                       \n",
       "3                     ...                       \n",
       "4                     ...                       \n",
       "\n",
       "   cnt_driver_star_feedback_5star_7d  cnt_passenger_complaint_7d  \\\n",
       "0                                  0                           0   \n",
       "1                                  0                           0   \n",
       "2                                  0                           0   \n",
       "3                                  0                           0   \n",
       "4                                  0                           0   \n",
       "\n",
       "   cnt_passenger_complaint_result_succeed_7d  \\\n",
       "0                                        NaN   \n",
       "1                                        NaN   \n",
       "2                                        NaN   \n",
       "3                                        NaN   \n",
       "4                                        NaN   \n",
       "\n",
       "   cnt_passenger_complaint_result_failed_7d  cnt_driver_complaint_7d  \\\n",
       "0                                       NaN                        0   \n",
       "1                                       NaN                        0   \n",
       "2                                       NaN                        0   \n",
       "3                                       NaN                        0   \n",
       "4                                       NaN                        0   \n",
       "\n",
       "   cnt_driver_complaint_result_succeed_7d  \\\n",
       "0                                     NaN   \n",
       "1                                     NaN   \n",
       "2                                     NaN   \n",
       "3                                     NaN   \n",
       "4                                     NaN   \n",
       "\n",
       "   cnt_driver_complaint_result_failed_7d  cnt_questionary_comment_order_7d  \\\n",
       "0                                    NaN                                 1   \n",
       "1                                    NaN                                 0   \n",
       "2                                    NaN                                 0   \n",
       "3                                    NaN                                 1   \n",
       "4                                    NaN                                 0   \n",
       "\n",
       "   cnt_questionary_comment_positive_answer_7d  \\\n",
       "0                                         NaN   \n",
       "1                                         NaN   \n",
       "2                                         NaN   \n",
       "3                                         NaN   \n",
       "4                                         NaN   \n",
       "\n",
       "   cnt_questionary_comment_negative_answer_7d  \n",
       "0                                         NaN  \n",
       "1                                         NaN  \n",
       "2                                         NaN  \n",
       "3                                         NaN  \n",
       "4                                         NaN  \n",
       "\n",
       "[5 rows x 159 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expall.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = pd.merge(pd.DataFrame(ids), unsafe, on='driver_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "expall.fillna(0, inplace=True)\n",
    "x = expall.iloc[:, 1:]\n",
    "y.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cnt_respond_orders_7d                                    int64\n",
       "cnt_pinche_orders_7d                                     int64\n",
       "cnt_appointment_orders_7d                                int64\n",
       "cnt_morning_peak_orders_7d                             float64\n",
       "cnt_normal_peak_orders_7d                              float64\n",
       "cnt_evening_peak_orders_7d                             float64\n",
       "cnt_cancel_orders_7d                                     int64\n",
       "cnt_cancel_by_p_orders_7d                              float64\n",
       "cnt_grab_after_cancel_by_p_orders_7d                   float64\n",
       "cnt_grab_before_cancel_by_p_orders_7d                  float64\n",
       "cnt_cancel_by_d_orders_7d                              float64\n",
       "cnt_cancel_final_result_driver_duty_7d                 float64\n",
       "cnt_cancel_by_p_final_result_driver_duty_7d            float64\n",
       "cnt_cancel_by_d_final_result_driver_duty_7d            float64\n",
       "cnt_cancel_result_is_reduce_driver_deal_rate_7d        float64\n",
       "cnt_cancel_result_is_reduce_driver_service_score_7d    float64\n",
       "cnt_cancel_result_driver_duty_penalty_7d               float64\n",
       "sum_cancel_result_driver_duty_penalty_amount_7d        float64\n",
       "cnt_cancel_final_result_passenger_duty_7d              float64\n",
       "cnt_cancel_by_p_final_result_passenger_duty_7d         float64\n",
       "cnt_cancel_by_d_final_result_passenger_duty_7d         float64\n",
       "cnt_cancel_result_passenger_is_duty_penalty_7d         float64\n",
       "sum_cancel_result_passenger_duty_penalty_amount_7d     float64\n",
       "cnt_cancel_driver_induced_cancel_order_7d              float64\n",
       "cnt_empty_drive_compensate_orders_7d                   float64\n",
       "cnt_empty_drive_compensate_orders_platform_cost_7d     float64\n",
       "cnt_empty_drive_compensate_orders_passenger_cost_7d    float64\n",
       "sum_empty_drive_compensation_7d                        float64\n",
       "sum_empty_drive_distance_7d                            float64\n",
       "sum_empty_drive_platform_cost_7d                       float64\n",
       "                                                        ...   \n",
       "cnt_appeal_qiedan_fixed_7d                             float64\n",
       "cnt_appeal_qiedan_fixed_penalty_7d                     float64\n",
       "cnt_appeal_qiedan_fixed_service_score_7d               float64\n",
       "cnt_order_may_appeal_7d                                float64\n",
       "cnt_deal_rate_may_appeal_7d                            float64\n",
       "cnt_penalty_may_appeal_7d                              float64\n",
       "cnt_service_score_may_appeal_7d                        float64\n",
       "cnt_unpaid_may_appeal_7d                               float64\n",
       "cnt_qiedan_may_appeal_7d                               float64\n",
       "cnt_passenger_star_feedback_7d                           int64\n",
       "cnt_passenger_star_feedback_1star_7d                     int64\n",
       "cnt_passenger_star_feedback_2star_7d                     int64\n",
       "cnt_passenger_star_feedback_3star_7d                     int64\n",
       "cnt_passenger_star_feedback_4star_7d                     int64\n",
       "cnt_passenger_star_feedback_5star_7d                     int64\n",
       "cnt_driver_star_feedback_7d                              int64\n",
       "cnt_driver_star_feedback_1star_7d                        int64\n",
       "cnt_driver_star_feedback_2star_7d                        int64\n",
       "cnt_driver_star_feedback_3star_7d                        int64\n",
       "cnt_driver_star_feedback_4star_7d                        int64\n",
       "cnt_driver_star_feedback_5star_7d                        int64\n",
       "cnt_passenger_complaint_7d                               int64\n",
       "cnt_passenger_complaint_result_succeed_7d              float64\n",
       "cnt_passenger_complaint_result_failed_7d               float64\n",
       "cnt_driver_complaint_7d                                  int64\n",
       "cnt_driver_complaint_result_succeed_7d                 float64\n",
       "cnt_driver_complaint_result_failed_7d                  float64\n",
       "cnt_questionary_comment_order_7d                         int64\n",
       "cnt_questionary_comment_positive_answer_7d             float64\n",
       "cnt_questionary_comment_negative_answer_7d             float64\n",
       "Length: 158, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下面试试随机森林算法和随机森林映射后采用逻辑斯特回归的方法。Kfold交叉验证。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/didi/anaconda3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import (RandomTreesEmbedding, RandomForestClassifier, GradientBoostingClassifier)\n",
    "from sklearn.metrics import roc_curve, roc_auc_score\n",
    "from sklearn import cross_validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['driver_id', 'mirror_total_ord_dcnt', 'renshang_ord_dcnt',\n",
       "       'xingsaorao_ord_dcnt', 'sunhuicaiwu_ord_dcnt', 'shilian_ord_dcnt',\n",
       "       'cusi_ord_dcnt', 'qiangjie_ord_dcnt', 'daoqie_ord_dcnt',\n",
       "       'bangjiaqiaozha_ord_dcnt', 'shedu_ord_dcnt', 'weiguiyunxing_ord_dcnt',\n",
       "       'qianzaifengxian_ord_dcnt', 'weixie_ord_dcnt', 'shipinanquan_ord_dcnt',\n",
       "       'weixieanquan_ord_dcnt'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   42.0s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  2.9min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  3.0min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=3, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=-1,\n",
       "            oob_score=False, random_state=None, verbose=1,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_estimator = 200\n",
    "rf = RandomForestClassifier(max_depth=3, n_estimators=n_estimator, n_jobs=-1, verbose=1)\n",
    "yall = (y.mirror_total_ord_dcnt>0)*1.0\n",
    "ysex = ((y.xingsaorao_ord_dcnt+y.weixie_ord_dcnt+y.weixieanquan_ord_dcnt)>0)*1.0\n",
    "rf.fit(x, ysex)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "效果不错，猜测有一个变量跟涉性投诉有较强关系（不一定是线性相关性）。这里没有深究。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    2.3s\n",
      "[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    9.4s\n",
      "[Parallel(n_jobs=4)]: Done 200 out of 200 | elapsed:    9.8s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8231357248552486\n"
     ]
    }
   ],
   "source": [
    "# The random forest model by itself\n",
    "y_pred_rf = rf.predict_proba(x)[:, 1]\n",
    "fpr_rf, tpr_rf, _ = roc_curve(yall, y_pred_rf)\n",
    "auc = roc_auc_score(ysex, y_pred_rf)\n",
    "print(auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1512555dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot ROC curve\n",
    "plt.xlim(0, 1)\n",
    "plt.ylim(0.0, 1)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.plot(fpr_rf, tpr_rf, label='RF')\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve (zoomed in at top left)')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   31.0s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  2.5min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  2.6min finished\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.5s\n",
      "[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    2.0s\n",
      "[Parallel(n_jobs=4)]: Done 200 out of 200 | elapsed:    2.1s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6223198370658405\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   35.0s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  2.2min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  2.3min finished\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.5s\n",
      "[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    2.1s\n",
      "[Parallel(n_jobs=4)]: Done 200 out of 200 | elapsed:    2.2s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7844909191190228\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   24.4s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  2.0min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  2.0min finished\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.5s\n",
      "[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    2.2s\n",
      "[Parallel(n_jobs=4)]: Done 200 out of 200 | elapsed:    2.2s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7631062712262883\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   22.3s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  1.7min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  1.8min finished\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.5s\n",
      "[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    2.1s\n",
      "[Parallel(n_jobs=4)]: Done 200 out of 200 | elapsed:    2.2s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7525708081212947\n"
     ]
    }
   ],
   "source": [
    "n_estimator=100\n",
    "rf = RandomForestClassifier(max_depth=3, n_estimators=n_estimator, n_jobs=-1, verbose=1)\n",
    "kf = cross_validation.KFold(yall.shape[0], n_folds=4)\n",
    "for train_index, test_index in kf:\n",
    "    #print(train_index)\n",
    "    X_train, X_test = x.iloc[train_index], x.iloc[test_index]\n",
    "    y_train, y_test = ysex[train_index], ysex[test_index]\n",
    "    rf.fit(X_train, y_train)\n",
    "    y_pred_rf = rf.predict_proba(X_test)[:, 1]\n",
    "    auc = roc_auc_score(y_test, y_pred_rf)\n",
    "    print(auc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "试试随机森林映射，将样本分层产出one hot encoding，供Logistic Regression使用。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.pipeline import make_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7525708081212947\n",
      "CPU times: user 10.8 s, sys: 8.57 s, total: 19.4 s\n",
      "Wall time: 20.1 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "rt = RandomTreesEmbedding(max_depth=2, n_estimators=10, random_state=0, n_jobs=-1)\n",
    "rt_lm = LogisticRegression()\n",
    "pipeline = make_pipeline(rt, rt_lm)\n",
    "pipeline.fit(X_train, y_train)\n",
    "y_pred_rt = pipeline.predict_proba(X_test)[:, 1]\n",
    "auc = roc_auc_score(y_test, y_pred_rf)\n",
    "print(auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RFLR(X_train, y_train, X_test, y_test):\n",
    "    rt = RandomTreesEmbedding(max_depth=2, n_estimators=50, random_state=0, n_jobs=-1)\n",
    "    rt_lm = LogisticRegression()\n",
    "    pipeline = make_pipeline(rt, rt_lm)\n",
    "    pipeline.fit(X_train, y_train)\n",
    "    y_pred_rt = pipeline.predict_proba(X_test)[:, 1]\n",
    "    auc = roc_auc_score(y_test, y_pred_rt)\n",
    "    print(auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7281274454649636\n",
      "0.7310772609377346\n",
      "0.7223336837599671\n",
      "0.7298428270705039\n",
      "0.7070573186415428\n",
      "CPU times: user 4min 17s, sys: 2min 26s, total: 6min 44s\n",
      "Wall time: 7min 18s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "kf = cross_validation.KFold(ysex.shape[0], n_folds=5, shuffle=True)\n",
    "for train_index, test_index in kf:\n",
    "    X_train, X_test = x.iloc[train_index], x.iloc[test_index]\n",
    "    y_train, y_test = ysex[train_index], ysex[test_index]\n",
    "    RFLR(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "进行PLS回归，求解x和y的分解，分解后的因子作为特征输入。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2min, sys: 1min 31s, total: 3min 32s\n",
      "Wall time: 3min 18s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "pls2 = PLSRegression(n_components=7)\n",
    "pls2.fit(x1, y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2267657, 7)\n",
      "CPU times: user 6.91 s, sys: 11 s, total: 18 s\n",
      "Wall time: 19.6 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "x0_r, y0_r = pls2.transform(x1, y1)\n",
    "print(x0_r.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import TruncatedSVD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 16s, sys: 47.3 s, total: 2min 3s\n",
      "Wall time: 1min 46s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "svd=TruncatedSVD(n_components=50)\n",
    "svd.fit(x1) \n",
    "u = svd.transform(x1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6496398721740004\n",
      "0.2132827532195946\n",
      "0.09340869302925237\n",
      "-0.15741484291634114\n",
      "0.04550248732429194\n",
      "-0.008242077180567483\n",
      "0.03414483704741123\n"
     ]
    }
   ],
   "source": [
    "for i in range(7):\n",
    "    print(np.corrcoef(y1.iloc[:, 1].T, x0_r[:, i].T)[0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1512060940>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1511f17240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx = np.random.choice(x0_r.shape[0], 1000)\n",
    "plt.scatter(y0_r[idx, 5], y1.iloc[idx, 1])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
